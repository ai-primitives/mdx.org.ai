#!/usr/bin/env node

const debug = true;
const log = (...args: any[]) => debug && console.log(...args);

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise);
  console.error('Reason:', JSON.stringify(reason, null, 2));
  console.error('Full error object:', reason);
  process.exit(1);
});

import { join } from 'path';
import { existsSync } from 'fs';
import { mkdir, writeFile } from 'fs/promises';
import { glob } from 'glob';
import {
  parseMDXFile,
  type MDXParseResult,
  type ValidMDXParseResult,
  type MDXMetadata,
  isValidMetadata
} from '../packages/mdx-types/src/utils/mdx-parser.js';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Error type for better error handling
interface TypeGenerationError extends Error {
  code?: string;
  stack?: string;
}

async function generateTypeDefinitions(files: ValidMDXParseResult[]): Promise<string> {
  try {
    const uniqueTypes = new Set<string>();
    files.forEach(file => {
      if (file.metadata.$type) {
        uniqueTypes.add(file.metadata.$type);
      }
    });

    const interfaces = Array.from(uniqueTypes).map(type => {
      try {
        const filesOfType = files.filter(f => f.metadata.$type === type);

        const propertyDefinitions = new Map<string, Set<string>>();

        filesOfType.forEach(file => {
          Object.entries(file.metadata).forEach(([key, value]) => {
            if (!propertyDefinitions.has(key)) {
              propertyDefinitions.set(key, new Set());
            }
            const typeStr = Array.isArray(value) ? 'any[]' :
              value === null ? 'null' :
              typeof value;
            propertyDefinitions.get(key)?.add(typeStr);
          });
        });

        const properties = Array.from(propertyDefinitions.entries())
          .map(([key, types]) => {
            const typeUnion = Array.from(types).join(' | ');
            const isRequired = key === '$type' || key === 'title' || key === 'description';
            return `  ${key}${isRequired ? '' : '?'}: ${typeUnion};`;
          })
          .join('\n');

        return `export interface ${type}Frontmatter {\n${properties}\n  [key: string]: any;\n}`;
      } catch (error) {
        console.error(`Error generating interface for type ${type}:`, error);
        throw error;
      }
    });

    return `// Generated by generate-types.ts
${interfaces.join('\n\n')}

export type MDXFrontmatter = ${Array.from(uniqueTypes).map(type => `${type}Frontmatter`).join(' | ')};
`;
  } catch (error) {
    console.error('Error in generateTypeDefinitions:', error);
    throw error;
  }
}

function isValidParseResult(result: MDXParseResult | null): result is ValidMDXParseResult {
  if (!result) return false;
  const metadata = result.metadata;
  return (
    typeof metadata === 'object' &&
    metadata !== null &&
    typeof metadata.$type === 'string' &&
    typeof metadata.title === 'string' &&
    typeof metadata.description === 'string'
  );
}

async function main() {
  try {
    log('Starting type generation...');

    const contentDirs = [
      'examples',
      'content',
      'package',
      'packages/mdx-types/content/types'
    ].map(dir => {
      const fullPath = join(process.cwd(), dir);
      if (!existsSync(fullPath)) {
        log(`Warning: Directory ${fullPath} does not exist`);
        return null;
      }
      return fullPath;
    }).filter(Boolean) as string[];

    if (contentDirs.length === 0) {
      throw new Error('No valid content directories found');
    }

    log('Content directories:', contentDirs);

    const mdxFilesPromises = contentDirs.map(async dir => {
      try {
        log(`Searching for MDX files in ${dir}...`);
        const pattern = join(dir, '**/*.mdx');
        log(`Using glob pattern: ${pattern}`);
        return await glob(pattern);
      } catch (error) {
        console.error(`Error searching for MDX files in ${dir}:`, error);
        return [];
      }
    });

    const mdxFiles = await Promise.all(mdxFilesPromises).catch(error => {
      console.error('Error in Promise.all while searching for MDX files:', error);
      throw error;
    });

    const allMdxFiles = mdxFiles.flat();
    log(`Total MDX files found: ${allMdxFiles.length}`);

    if (allMdxFiles.length === 0) {
      throw new Error('No MDX files found in any content directory');
    }

    const parsePromises = allMdxFiles.map(async (filePath: string) => {
      try {
        log(`Parsing ${filePath}...`);
        return await parseMDXFile(filePath, true);
      } catch (error) {
        console.error(`Error parsing ${filePath}:`, error);
        return null;
      }
    });

    const parsedFiles = await Promise.all(parsePromises).catch(error => {
      console.error('Error in Promise.all while parsing files:', error);
      throw error;
    });

    const validParsedFiles = parsedFiles.filter(isValidParseResult);
    log(`Successfully parsed ${validParsedFiles.length} valid MDX files out of ${parsedFiles.length} total files`);

    if (validParsedFiles.length === 0) {
      throw new Error('No valid MDX files found after parsing');
    }

    try {
      const validFiles = validParsedFiles.map((file: ValidMDXParseResult) => ({
        ...file,
        metadata: {
          ...file.metadata,
          $type: file.metadata.$type.replace(/^https:\/\/mdx\.org\.ai\//, '')
        }
      }));

      const typeDefinitions = await generateTypeDefinitions(validFiles);

      const generatedDir = join(__dirname, '../packages/mdx-types/src/generated');
      await mkdir(generatedDir, { recursive: true }).catch((error: TypeGenerationError) => {
        console.error('Error creating generated directory:', error);
        throw error;
      });

      const outputPath = join(generatedDir, 'frontmatter.d.ts');
      await writeFile(outputPath, typeDefinitions, 'utf-8').catch((error: TypeGenerationError) => {
        console.error('Error writing type definitions:', error);
        throw error;
      });

      log('Successfully generated type definitions at:', outputPath);
    } catch (error) {
      console.error('Error in type generation:', error);
      throw error;
    }
  } catch (error) {
    console.error('Error in main function:', error instanceof Error ? error.stack : JSON.stringify(error, null, 2));
    process.exit(1);
  }
}

main().catch(error => {
  console.error('Unhandled error in main:');
  if (error instanceof Error) {
    console.error('Error name:', error.name);
    console.error('Error message:', error.message);
    console.error('Stack trace:', error.stack);
  } else {
    console.error('Non-Error object thrown:', JSON.stringify(error, null, 2));
  }
  process.exit(1);
});
